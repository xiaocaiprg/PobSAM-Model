load pobsam.maude
mod CASE is
	protecting STRICTMODE .
	protecting LOOSEMODE .
	---define Actor Actorstate Action
	ops l1 l2 e : -> Actor .
	ops seton setoff setInsentity : -> Msg .
	ops ON OFF d1 d2 : -> AState .
	ops night sufficient fire fireputout vocation : -> Environment .

	---define configuration Cv Cn Cf 
	ops Cv Cf Cn : -> ConfigurationName .

	---define GoverningPolicy
	ops Pn1 Pn2 Pn3 Pn4 : -> GoverningPolicy .
	ops Pf1 Pf2 : -> GoverningPolicy .
	ops Pv1 Pv2 Pv3 : -> GoverningPolicy .
	op Pause : -> GoverningPolicy .

	eq Pause = GP[o(0),E(0),True,termination] .

	---Normal Configuration
    eq Pn1 = GP[o(1),E(1),True,l1 enf seton to ON || l2 enf seton to ON] .
	eq Pn2 = GP[o(1),E(2),True,l1 enf setoff to OFF || l2 enf setoff to OFF] .
	eq Pn3 = GP[o(2),E(3),night,l1 enf setInsentity to d1 || l2 enf setInsentity to d1] .
	eq Pn4 = GP[o(4),E(4),night,l1 enf setoff to OFF || l2 enf setoff to OFF] .

	---Fire Configuration
	eq Pf1 = GP[o(1),E(5),True,e enf seton to ON] .
	eq Pf2 = GP[o(1),E(6),fire,e enf setoff to OFF] .

	---Vocation Configuration
	eq Pv1 = GP[o(1),E(7),True,l1 enf seton to ON || l2 enf setoff to OFF] .
	eq Pv2 = GP[o(2),E(8),vocation,l1 enf setoff to OFF || l2 enf seton to ON] .
	eq Pv3 = GP[o(2),E(9),vocation,l1 enf setInsentity to d2 || l2 enf setInsentity to d2] .


	eq ReqActorState(E(1)) = l1(ON),l2(ON) .
	eq ReqActorState(E(2)) = l1(OFF),l2(OFF) .
	eq ReqActorState(E(3)) = l1(d1),l2(d1) .
	eq ReqActorState(E(4)) = l1(OFF),l2(OFF) .
	eq ReqActorState(E(5)) = e(ON) .
	eq ReqActorState(E(6)) = e(OFF) .
	eq ReqActorState(E(7)) = l1(ON),l2(OFF) .
	eq ReqActorState(E(8)) = l1(OFF),l2(ON) .
	eq ReqActorState(E(9)) = l1(d2),l2(d2) .
	
	ops iscnfrmd onVac : -> View .

	eq set(E(1)) = night .
	eq set(E(2)) = sufficient .
	eq set(E(5)) = fire .
	eq set(E(6)) = fireputout .
	eq set(E(7)) = vocation .

	eq ReqAdaptionPolicy(Cn) = AP(Cf)[E(5),T,ac,Strict,o(1)] & AP(Cv)[E(7),T,ac,Loose,o(2)] .
	eq ReqAdaptionPolicy(Cf) = AP(choice[onVac ? Cv,Cn])[E(6),T,fireputout,Loose,o(1)] & AP(Cv)[E(7),T,fireputout,Loose,o(2)] .
	eq ReqAdaptionPolicy(Cv) = AP(Cf)[E(5),T,ac,Strict,o(1)] & AP(Cn)[E(10),T,ac,Loose,o(2)] .

	var C : ConfigurationName .
	ceq judge(onVac,C) = true if C == Cv .
	ceq judge(onVac,C) = false if C == Cn .

	eq ReqGoverningPolicy(Cn) = Pn1,Pn2,Pn3,Pn4,Pause .
	eq ReqGoverningPolicy(Cf) = Pf1,Pf2,Pause .
	eq ReqGoverningPolicy(Cv) = Pv1,Pv2,Pv3,Pause .

	ops initnight initsufficient : -> System .
	eq initnight = M[wait](empty)(null)Cn[deadlocka]keep(night)Reseverse(Cn)E(99) .
	eq initsufficient = M[wait](empty)(null)Cn[deadlocka]keep(sufficient)Reseverse(Cn)E(99) .

	op a : -> System .
	eq a = M[wait](empty)(null)Cf[deadlocka]keep(sufficient)Reseverse(Cf)E(99) .

	op b : -> System .
	eq b = M[wait](empty)(null)Cv[deadlocka]keep(sufficient)Reseverse(Cv)E(99) .
endm

