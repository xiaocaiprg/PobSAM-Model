load model-checker.maude
load Case1.maude

mod POBSAM-PRED is
	including SATISFACTION .
	protecting CASE1 .

	subsort System < State .
	op event : Nat -> Prop [ctor] .
	op Mo : Mode -> Prop [ctor] .
	op reachable : ConfigurationName -> Prop [ctor] .
	op Preserve : Environment -> Prop [ctor] .
	op A : Action -> Prop [ctor] .
	op last : ConfigurationName -> Prop [ctor] .
---	op runmode : Mode -> Prop [ctor] .


	var Sys : System .
	var N1 : Nat .
	var P : Prop .
	var M1 : Mode .
	var C : ConfigurationName .
	var envir : Environment .
	var action : Action .
	var vstate : VState .
---	var mode : Mode .

	eq E(N1) Sys |= event(N1) = true .
	eq C M[enforcement] Sys |= reachable(C) = true .
	eq Reseverse(C) Sys |= last(C) = true .
---	eq M[mode] Sys |= runmode(mode) = true .
	--- Effect Inference Conflict
	eq [action] Sys |= A(action) = true .
	eq keep(envir) Sys |= Preserve(envir) = true .
	eq M[M1] Sys |= Mo(M1) = true .
	eq Sys |= P = false [owise] .

endm

mod POBSAM-CHECKER is 
	protecting POBSAM-PRED .
	including MODEL-CHECKER .
	including LTL-SIMPLIFIER .
endm

---Action Conflict
red modelCheck(initlight, []~(event(1) /\ event(2))) .
---stability checking
red modelCheck(initlight, ~ <>[] (Mo(loose) \/ Mo(strict) \/ Mo(wait))) .
---Deadlock-freedom check
red modelCheck(initlight,[](Mo(loose) \/ Mo(strict) -> <> Mo(enforcement))) .
---unreachable Configuration
red modelCheck(initlight,[](event(7) -> <> reachable(Cm))) .
red modelCheck(initlight,[](event(9) -> <> reachable(Cs))) .
---effect conflict
red modelCheck(initlight, [](reachable(Cn) -> ~ <>(Preserve(light) /\ A(Light . switchon)))) .

