fmod ACTOR is
	protecting NAT .

	sort Actor .
	sort Msgsrv .
	sort Statevars .
	sorts Mtd Stv .
	sort ACTR .
	sort V .
	sort VState .
	
	op _:_ : Actor V -> VState [ctor] .
	op __ : VState VState -> VState [comm assoc] .
	
	op msgsrv(_) : Msgsrv -> Mtd [ctor] .
	op __ : Mtd Mtd -> Mtd [comm assoc] .
	op statevars{_} : Statevars -> Stv [ctor] .
	op Actor(_){_;_} : Actor Stv Mtd -> ACTR . 
endfm

fmod ACTION is
	protecting BOOL .
	protecting ACTOR .

	sort Action .

	op _._ : Actor Msgsrv -> Action .
	op deadlocka : -> Action [ctor] .
	op termination : -> Action [ctor] .

	op _->_ : Action Action -> Action .
	op _||_ : Action Action -> Action .
	op _+_ : Action Action -> Action .

	var w : Bool .
	vars a b : Action .
	op [_?_,_] : Bool Action Action -> Action .

	op execute : Action -> VState .

endfm

fmod EVENT is
	protecting NAT .
	sort Event .
	sort View .
	sort Environment .

	op E : Nat -> Event [ctor] .
	op set : Event -> Environment .
endfm


fmod GOVERNP is
	protecting EVENT .
	protecting ACTION .
	sort GoverningPolicy .
	sort GoverningPolicies .
	subsort GoverningPolicy < GoverningPolicies .
	sorts Priority Condition .
	subsort Environment < Condition .

	op o : Nat -> Priority [ctor] .
	ops True False : -> Condition .

	op empty : -> GoverningPolicies [ctor] .	
	op GP[on_if_do_priority_] : Event Condition Action Priority -> GoverningPolicy [ctor] .
	op _,_ : GoverningPolicies GoverningPolicies -> GoverningPolicies [comm assoc id: empty] .

endfm

fmod ADAPTIONP is
	protecting BOOL .
	protecting EVENT .
	protecting GOVERNP .

	sort AdaptionPolicy .
	sort AdaptionPolicies . 
	sort ConfigurationName .

	subsort AdaptionPolicy < AdaptionPolicies .
	sorts TCond ACond Type .
	subsort Environment < ACond .

---	op ReqConfig : ConfigurationName -> Configuration .

---	op _ND_ : ConfigurationName ConfigurationName -> ConfigurationName .
---	op choice[_?_,_] : View ConfigurationName ConfigurationName -> ConfigurationName .

	ops Loose Strict : -> Type .
	ops ac nac : -> ACond .
	ops T F : -> TCond .

---	op judge : View ConfigurationName -> Bool .

	op null : -> AdaptionPolicies [ctor] .
 	op AP[_on_if_switchto_when_priority_] : Type Event TCond ConfigurationName ACond Priority -> AdaptionPolicy [ctor] .
	op _&_ : AdaptionPolicies AdaptionPolicies -> AdaptionPolicies [comm assoc id: null] . 

endfm



fmod CONFIGURATION is
	protecting ADAPTIONP .
	sort Configuration .
	protecting BOOL .
	
	subsort ConfigurationName < Configuration .
	op ReqGoverningPolicies : ConfigurationName -> GoverningPolicies .
	op ReqAdaptionPolicies : ConfigurationName -> AdaptionPolicies .

	op _ND_ : ConfigurationName ConfigurationName -> ConfigurationName .
	op choice[_?_,_] : View ConfigurationName ConfigurationName -> ConfigurationName .

	op judge : View ConfigurationName -> Bool .

endfm

fmod VIEW is
	sort View .

endfm

fmod MANAGER is
	sort Manager .
	sort Mode .

	op wait : -> Mode .
	op strict : -> Mode .
	op loose : -> Mode .
	op enforcement : -> Mode .

	op M[_] : Mode -> Manager .
endfm

mod ENFORCEMENT is
	protecting MANAGER .
	protecting ADAPTIONP .
	protecting CONFIGURATION .
	
	sort System .

	subsorts Manager GoverningPolicies ConfigurationName < System .
	subsorts AdaptionPolicies Event < System .

	op keep : Environment -> System .
	op {_} : VState -> System .
	op Reseverse : ConfigurationName -> System .
	op [_] : Action -> System .

	op __ : System System -> System [assoc comm] .

	vars p1 p2 : GoverningPolicies .
	vars A' A B : Action .
	vars C1 C2 : ConfigurationName .
---	var R : GoverningPolicys .
	var vstate : VState .
	var w : Bool .
	vars N1 N2 N3 N4 : Nat .
	var NE1 : Nat .
	var cond : Condition .
	var actor : Actor .
---	var m : Msg .
	var envir : Environment .

	rl [NPE1] : 
 			M[wait] (empty)(null)C1[deadlocka]keep(envir)E(99)Reseverse(C2)
 		=> 
			M[enforcement] (ReqGoverningPolicies(C1))C1 (ReqAdaptionPolicies(C1))E(0)
 				 [termination]keep(envir)Reseverse(C2) .

---First triggered natural event
    crl [NPE2-trigger-nature] : 
    		M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2) E(0)
    					C1[termination]keep(envir){vstate}
    	=>  
    		M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2) E(N1)
						C1[A] keep(set(E(N1))) {execute(A)}
		    if cond == True /\  N1 =/= 0 /\ N2 == 1 .

---Triggered human event
 	crl [NPE2-enforce-person] : 
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(NE1)
 								C1[A'] keep(envir) {vstate} 
 		=>  
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(N1)
 				 				C1[A] keep(envir) {execute(A)}
 			if cond == envir /\ N2 > 1 /\  N1 =/= 0 /\ A' =/= termination .

---Triggered nature event
 	crl [NPE2-enforce-nature] : 
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(NE1)
 								C1[A'] keep(envir) {vstate}
 		=>  
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(N1)
 				 				C1[A] keep(set(E(N1))) {execute(A)}
		if cond == True /\ N2 == 1 /\  N1 =/= 0 /\ A' =/= termination .

---Trigger dependent environment variable event
 	crl [NPE2-enfore-nature-rely] : 
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(NE1)
    					C1[A']keep(envir) {vstate}
   		=>  
   			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(N1)
 				 		C1[A] keep(set(E(N1))) {execute(A)}
 			if cond == envir /\  N1 =/= 0 /\ N2 == 1 .	
	




---Non-deterministic choice
 	rl [NPE4] : 
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C1[A + B] keep(envir) {vstate}
		=>  
			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
				 				C1[A] keep(envir) {execute(A)} .

    crl [NPE5] : 
    		M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C1[A + B] keep(envir)
 		=>  
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C1[B] keep(envir) 
 			if A == termination .

 ---Conditional selection
 	crl [NPE6] : 
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 								C1[[w ? A,B]] {vstate}
 		=>  
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 								C1[A] {execute(A)}
 			if w == true .

	crl [NPE7] : 
			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 								C1[[w ? A,B]] {vstate}
 		=>  
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2) 
 								C1[B] {execute(B)}
 			if w == false .

 	---stop	
 	rl [NPE12] : 
 			M[enforcement](p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(0)
			 				C1[termination] keep(envir) {vstate}
		=> 
			M[enforcement] (empty)E(99)
			 				C1[deadlocka] keep(envir) {vstate} .
---Suspend operation
	crl [NPE3-pause] : 
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(NE1)
 				 				C1[A'] keep(envir) {vstate}
 		=> 
 			M[enforcement] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)E(0)
 				 				C1[termination] keep(envir) {vstate}
 			if N1 == 0 /\ cond == True /\ N2 == 0 /\ A == termination /\ A' =/= termination . 

endm


mod STRICTMODE is
	protecting ENFORCEMENT .

	vars AP1 AP2 : AdaptionPolicies .
	vars N1 N2 : Nat .
	var NE1 : Nat .

	var A : Action .
	var GP : GoverningPolicies .
	vars C C' : ConfigurationName .
	vars D D' : ConfigurationName .
	var tcond : TCond .
	var view : View .
	var acond : ACond .
	var type : Type .
	var envir : Environment .


---Switch to Strict Adaption
 	crl [SA1] : 
 			M[enforcement] C [A] keep(envir) E(NE1) 
 			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)
 			Reseverse(C')	
 		=> 
			M[strict] D [termination]keep(envir)E(N1)
			Reseverse(C)
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)
			if type == Strict /\ tcond == T /\ N2 == 1 /\ N1 =/= 0 /\ A =/= deadlocka .


---Complete Strict Adaption
	crl [SA2] : 
			M[strict]D(GP)[termination]keep(envir)E(NE1)
			Reseverse(C')
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)
		=> 
			M[enforcement](ReqGoverningPolicies(D))D(ReqAdaptionPolicies(D))
			Reseverse(C')
				[termination] keep(envir) E(0)
			if acond == ac .

	rl [SA4] : 
			M[strict] D (AP1 & AP[type on E(N1) if tcond switchto D ND D' when acond priority o(N2)] & AP2)

		=> 
			M[strict] D' (AP1 & AP[type on E(N1) if tcond switchto D ND D' when acond priority o(N2)] & AP2)
 .

	crl [SA6] : 
			M[strict]C(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
			Reseverse(C')
 		=> 
 			M[strict]D(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
 			Reseverse(C)
 			if judge(view,C') /\ type == Strict /\ tcond == T .

	crl [SA7] : 
			M[strict]C(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
			Reseverse(C')
 		=> 
 			M[strict]D'(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
 			Reseverse(C)
 			if not judge(view,C') /\ type == Strict /\ tcond == T .

endm


mod LOOSEMODE is
	protecting ENFORCEMENT .

	vars C C' : ConfigurationName .
	vars D D' : ConfigurationName .	
	vars A B A' : Action .
    vars N1 N2 N3 N4 : Nat .
    var NE1 : Nat .

    var view : View .
    var cond : Condition .
    var tcond : TCond .
    var acond : ACond .
    var type : Type .

	var GP : GoverningPolicies .
	vars p1 p2 : GoverningPolicies .
	vars AP1 AP2 : AdaptionPolicies .
	var actor : Actor .
	var envir : Environment .
	var vstate : VState .

---Switch to Loose Adaption
	crl [LA1] : 
			M[enforcement]C[A] keep(envir) E(NE1)
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)
 			Reseverse(C')
			=> 
			M[loose]D [A] keep(envir) E(N1)
			Reseverse(C)
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)		
			if type == Loose /\ tcond == T /\ N2 == 2 /\ N1 =/= 0 /\ A =/= deadlocka /\ A =/= termination .

---Complete Loose Adaption and switch to enforcement
	crl [LA2] : 
			M[loose] C (GP)	Reseverse(C')
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)		
				[A] keep(envir) E(N1)
		=> 
			M[enforcement] (ReqGoverningPolicies(D)) D (ReqAdaptionPolicies(D)) 
				[termination] keep(envir)E(0)
				Reseverse(C')
			if acond == ac .


	crl [LA2-rely-envir] : 
			M[loose] C (GP)	
			(AP1 & AP[type on E(N1) if tcond switchto D when acond priority o(N2)] & AP2)		
				[A] keep(envir) E(N1)Reseverse(C')
		=> 
			M[enforcement] (ReqGoverningPolicies(D)) D (ReqAdaptionPolicies(D)) 
				[termination] keep(envir)E(0)Reseverse(C')
			if acond == envir .


---Conditionally switch to loose mode
	crl [LA6] :
				M[enforcement]C
			(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
				Reseverse(C')[A]keep(envir)E(NE1)
 		=> 
 			M[loose]D' 
 			(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)		
 				Reseverse(C)[A]keep(envir) E(N1)
   			if judge(view,C') /\ type == Loose /\ tcond == T /\ N1 =/= 0 /\ N2 == 1 /\ A =/= deadlocka /\ A =/= termination .
   
    crl [LA6-complete-rely] : 
    			M[loose] D' (GP)
    		(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
    		[A] Reseverse(C')keep(envir) E(N1)
		=> 
		    M[enforcement] (ReqGoverningPolicies(D')) D' (ReqAdaptionPolicies(D'))
		    	[termination] Reseverse(C') keep(envir)E(0)
			if acond == envir /\ acond =/= nac .

    crl [LA6-complete] : 
    		M[loose] D' (GP)	
    		(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
    			[A] Reseverse(C')keep(envir) E(N1)
		=> 
		    M[enforcement] (ReqGoverningPolicies(D')) D' (ReqAdaptionPolicies(D'))
		    	[termination] Reseverse(C') keep(envir)E(0)
			if acond == ac .

   crl [LA7] : 
    		M[enforcement]C
			(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
				Reseverse(C')[A]keep(envir)E(NE1)
 		=> 
 			M[loose]D 
 			(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)		
 				Reseverse(C)[A]keep(envir) E(N1)
 			if not judge(view,C') /\ type == Loose /\ tcond == T /\ N1 =/= 0 /\ A =/= deadlocka /\ A =/= termination .

    crl [LA7-complete] : 
    		M[loose] D (GP)	
    		(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
    			[A] Reseverse(C')keep(envir) E(N1)
		=> 
		    M[enforcement] (ReqGoverningPolicies(D)) D (ReqAdaptionPolicies(D))
		    	[termination] Reseverse(C') keep(envir)E(0)
	   	    if acond == ac .

	crl [LA7-complete-rely] : 
    			M[loose] D (GP)
    		(AP1 & AP[type on E(N1) if tcond switchto choice[view ? D,D'] when acond priority o(N2)] & AP2)
    		[A] Reseverse(C')keep(envir) E(N1)
		=> 
		    M[enforcement] (ReqGoverningPolicies(D)) D (ReqAdaptionPolicies(D))
		    	[termination] Reseverse(C') keep(envir)E(0)
	   	    if acond == envir .

---Unsatisfied condition cannot be switched to enforcement
	crl [LA3-enforce-nature-rely] : 
			M[loose]C(p1,GP[on E(N1) if cond do A priority o(N2)],p2)
			(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A'] Reseverse(C') keep(envir)E(NE1)---{vstate}
 		=> 
 			M[loose]C (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A]Reseverse(C')keep(set(E(N1)))E(N1)
 				---{execute(A)}
 			if acond =/= envir /\ A =/= deadlocka /\ A =/= termination 
 			/\ N1 =/= 0 /\ N2 == 1 /\ cond == envir /\ acond =/= nac .

	crl [LA3-enforce-nature] : 
 			M[loose]C(p1,GP[on E(N1) if cond do A priority o(N2)],p2)
			(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A'] Reseverse(C) keep(envir)E(NE1){vstate}
 		=> 
 			M[loose]C (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A]Reseverse(C)keep(set(E(N1)))E(N1)
 				{execute(A)}
 		if acond =/= envir /\ A =/= deadlocka /\ A =/= termination 
 			/\ N1 =/= 0 /\ N2 == 1 /\ cond == True /\ acond =/= nac .

	crl [LA3-enforce-person] : 
 				M[loose]C(p1,GP[on E(N1) if cond do A priority o(N2)],p2)
			(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A'] Reseverse(C) keep(envir)E(NE1){vstate}
 		=> 
 			M[loose]C (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				(AP1 & AP[type on E(N3) if tcond switchto D when acond priority o(N4)] & AP2)
 				[A]Reseverse(C)keep(envir)E(N1)
 				{execute(A)}
 		if acond =/= envir /\ A =/= deadlocka /\ A =/= termination 
 			/\ N1 =/= 0 /\ N2 > 1 /\ cond == envir /\ acond =/= nac .
 
 
 	crl [LA5] :  
 			M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[A + B] keep(envir)
   	    => 
   	    	M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[B] keep(envir) 
 		 	if A == termination .
 
 ---	rl [LA8] : M[loose] C[A || B] => M[loose] C[A' || B] .
 	crl [LA9] :  
 			M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[A || B] keep(envir)
    	=> 
    		M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[B] keep(envir) 
 		 	if A == termination .
--- 	rl [LA10] : M[loose] C[A -> B] => M[loose] C[A' -> B] .
  	crl [LA11] : 
  			M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[A -> B] keep(envir)
   	    => 
   	    	M[loose] (p1,GP[on E(N1) if cond do A priority o(N2)],p2)
 				 				C[B] keep(envir) 
 		 	if A == termination .

endm


